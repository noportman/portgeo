{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to portgeo","text":"<p>A python package for geospatial applications</p> <p></p> Under Development <p>This package is currently under active development. Features may change and instability is expected.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://snowport.github.io/portgeo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create interactive maps</li> <li>Process geospatial data</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>import portgeo\nimport os\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<p>Compare with latest</p>"},{"location":"changelog/#v010-2025-05-18","title":"v0.1.0 - 2025-05-18","text":"<p>Compare with v0.0.3</p>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Add fullscreen function (#20) (f3accbb by snowport).</li> <li>Add add_basemap_gui function (#19) (abc6a7e by snowport).</li> <li>added fav (cd4e68a by Noah Portman).</li> <li>added logo (21af758 by Noah Portman).</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>changelog added (79d5fe4 by Noah Portman).</li> <li>changes to yml (3e9fa25 by Noah Portman).</li> </ul>"},{"location":"changelog/#v003-2025-05-13","title":"v0.0.3 - 2025-05-13","text":"<p>Compare with v0.0.2</p>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Add choropleth functionality (#17) (19d27f1 by snowport).</li> <li>add split map (#14) (49742dc by snowport).</li> <li>Added matplotlib (#13) (34d700c by snowport).</li> <li>Added raster functionality (#12) (1a92232 by snowport).</li> <li>Add split map (#11) (4997916 by snowport).</li> <li>Add folium notebook example (#9) (24b9d3e by snowport).</li> <li>Add dependencies (e16522a by Noah Portman).</li> <li>Added folium module (#6) (8a167c7 by snowport).</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Remove codespell from yml (#5) (486ee8d by snowport).</li> </ul>"},{"location":"changelog/#v002-2025-05-01","title":"v0.0.2 - 2025-05-01","text":"<p>Compare with v0.0.1</p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Add colab badge (08183ef by Noah Portman).</li> <li>Add pre-commit hook (#2) (eaf4df9 by snowport).</li> <li>add CNAME (eace203 by Noah Portman).</li> </ul>"},{"location":"changelog/#v001-2025-05-01","title":"v0.0.1 - 2025-05-01","text":"<p>Compare with first commit</p>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#portgeo.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>portgeo/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/snowport/portgeo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>portgeo could always use more documentation, whether as part of the official portgeo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/snowport/portgeo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up portgeo for local development.</p> <ol> <li> <p>Fork the portgeo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/portgeo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv portgeo\n$ cd portgeo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 portgeo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/snowport/portgeo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>This module provides a custom Map class that extends folium.Map</p>"},{"location":"foliumap/#portgeo.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Custom Map class to handle portgeos.</p> Source code in <code>portgeo/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"Custom Map class to handle portgeos.\"\"\"\n\n    def __init__(self, center=[0, 0], zoom=2, **kwargs):\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_geojson(\n        self,\n        data,\n        tooltip_fields=None,\n        tooltip_aliases=None,\n        highlight=True,\n        style_function=None,\n        **kwargs,\n    ):\n        \"\"\"Add a GeoJSON layer to the map with optional tooltip and highlight on hover.\n\n        Args:\n            data (str or dict): Path to the GeoJSON file or GeoJSON data.\n            tooltip_fields (list): Fields to include in the tooltip.\n            tooltip_aliases (list): Optional aliases for tooltip fields.\n            highlight (bool): Whether to highlight geometry on hover.\n            style_function (function): Optional base style function.\n            **kwargs: Additional arguments for folium.GeoJson.\n\n        Raises:\n            TypeError: If data is not a string or dictionary.\n            ValueError: If data is not a valid GeoJSON.\n        \"\"\"\n        import geopandas as gpd\n        import folium\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        else:\n            raise TypeError(\"Data must be a file path or GeoJSON dictionary.\")\n\n        # Default style (optional)\n        default_style = style_function or (\n            lambda f: {\"fillOpacity\": 0.5, \"weight\": 1, \"color\": \"gray\"}\n        )\n\n        # Optional highlight effect on hover\n        highlight_fn = (\n            (lambda f: {\"weight\": 3, \"color\": \"yellow\", \"fillOpacity\": 0.2})\n            if highlight\n            else None\n        )\n\n        # Tooltip configuration\n        tooltip = (\n            folium.GeoJsonTooltip(\n                fields=tooltip_fields,\n                aliases=tooltip_aliases or tooltip_fields,\n                localize=True,\n                sticky=True,\n                labels=True,\n            )\n            if tooltip_fields\n            else None\n        )\n\n        folium.GeoJson(\n            data=geojson,\n            style_function=default_style,\n            highlight_function=highlight_fn,\n            tooltip=tooltip,\n            **kwargs,\n        ).add_to(self)\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Add a shapefile layer to the map.\n\n        Args:\n            data (str): Path to the shapefile.\n            **kwargs: Additional arguments for folium.GeoJson.\n        \"\"\"\n\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Add a GeoDataFrame layer to the map.\n\n        Args:\n            gdf (GeoDataFrame): GeoDataFrame to add.\n            **kwargs: Additional arguments for folium.GeoJson.\n        \"\"\"\n\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Add a vector layer to the map.\n\n        Args:\n            data (str or GeoDataFrame or dict): Path to the vector file,\n                GeoDataFrame, or GeoJSON data.\n            **kwargs: Additional arguments for folium.GeoJson.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\n                \"Unsupported data type. Please provide a GeoDataFrame, GeoJSON, or file path.\"\n            )\n\n    def add_layer_control(self):\n        \"\"\"Add a layer control to the map.\n\n        Args:\n            **kwargs: Additional arguments for folium.LayerControl.\n        \"\"\"\n        folium.LayerControl().add_to(self)\n        folium.plugins.Fullscreen().add_to(self)\n\n    def add_split_map(self, left=\"openstreetmap\", right=\"cartodbpositron\", **kwargs):\n        \"\"\"Add a split map to the map.\n        Args:\n            left (str): Name of the left layer. Default is \"openstreetmap\".\n            right (str): Name of the right layer. Default is \"cartodbpositron\".\n            **kwargs: Additional arguments for folium.TileLayer.\n        \"\"\"\n        from localtileserver import get_folium_tile_layer\n        import os\n\n        if left.startswith(\"http\") or os.path.exists(left):\n            layer_left = get_folium_tile_layer(left, overlay=True, **kwargs)\n        else:\n            layer_left = folium.TileLayer(left, overlay=True, **kwargs)\n\n        if right.startswith(\"http\") or os.path.exists(right):\n            layer_right = get_folium_tile_layer(right, overlay=True, **kwargs)\n        else:\n            layer_right = folium.TileLayer(right, overlay=True, **kwargs)\n\n        sbs = folium.plugins.SideBySideLayers(\n            layer_left=layer_left, layer_right=layer_right\n        )\n\n        layer_left.add_to(self)\n        layer_right.add_to(self)\n        sbs.add_to(self)\n\n    def add_choropleth(\n        self,\n        gdf,\n        column,\n        join_col,\n        key_on=\"feature.properties.name\",\n        fill_color=\"YlGn\",\n        legend_name=None,\n        tooltip_fields=None,\n        tooltip_aliases=None,\n        **kwargs,\n    ):\n        \"\"\"Add a Choropleth layer to the map.\n\n        Args:\n            gdf (GeoDataFrame or str): GeoDataFrame or path to file with geometries and data.\n            column (str): Column in the GeoDataFrame to color by.\n            join_col (str): Column to join GeoJSON and data on.\n            key_on (str): GeoJSON property key to match join_col (e.g., 'feature.properties.&lt;name&gt;').\n            fill_color (str): Color scheme for the choropleth.\n            legend_name (str): Name for the legend.\n            **kwargs: Additional arguments for folium.Choropleth.\n        \"\"\"\n        import geopandas as gpd\n        import json\n\n        # Case 1: file path\n        if isinstance(gdf, str):\n            gdf = gpd.read_file(gdf)\n            gdf = gdf.to_crs(epsg=4326)\n            geojson = json.loads(gdf.to_json())\n\n        # Case 2: GeoJSON dictionary\n        elif isinstance(gdf, dict):\n            if \"features\" not in gdf:\n                raise ValueError(\"GeoJSON dict must have a 'features' key.\")\n            try:\n                gdf = gpd.GeoDataFrame.from_features(gdf[\"features\"])\n                gdf = gdf.set_geometry(\"geometry\").set_crs(epsg=4326)\n                geojson = gdf.__geo_interface__  # or json.loads(gdf.to_json())\n            except Exception as e:\n                raise ValueError(f\"Failed to parse GeoJSON dictionary: {e}\")\n\n        # Case 3: GeoDataFrame\n        elif isinstance(gdf, gpd.GeoDataFrame):\n            gdf = gdf.to_crs(epsg=4326)\n            geojson = json.loads(gdf.to_json())\n\n        else:\n            raise TypeError(\n                \"gdf must be a GeoDataFrame, file path, or GeoJSON dictionary.\"\n            )\n\n        if join_col not in gdf.columns or column not in gdf.columns:\n            raise ValueError(\n                f\"'{join_col}' and/or '{column}' not found in GeoDataFrame columns: {list(gdf.columns)}\"\n            )\n\n        folium.Choropleth(\n            geo_data=geojson,\n            data=gdf[[join_col, column]],\n            columns=[join_col, column],\n            key_on=key_on,\n            fill_color=fill_color,\n            fill_opacity=0.7,\n            line_opacity=0.2,\n            legend_name=legend_name or column,\n            **kwargs,\n        ).add_to(self)\n\n        # Add tooltips on hover (optional)\n        if tooltip_fields:\n            folium.GeoJson(\n                geojson,\n                tooltip=folium.GeoJsonTooltip(\n                    fields=tooltip_fields,\n                    aliases=tooltip_aliases or tooltip_fields,\n                    localize=True,\n                    sticky=True,\n                    labels=True,\n                ),\n                style_function=lambda x: {\n                    \"fillOpacity\": 0,\n                    \"weight\": 0,\n                },  # transparent overlay\n            ).add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_choropleth","title":"<code>add_choropleth(self, gdf, column, join_col, key_on='feature.properties.name', fill_color='YlGn', legend_name=None, tooltip_fields=None, tooltip_aliases=None, **kwargs)</code>","text":"<p>Add a Choropleth layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame or str</code> <p>GeoDataFrame or path to file with geometries and data.</p> required <code>column</code> <code>str</code> <p>Column in the GeoDataFrame to color by.</p> required <code>join_col</code> <code>str</code> <p>Column to join GeoJSON and data on.</p> required <code>key_on</code> <code>str</code> <p>GeoJSON property key to match join_col (e.g., 'feature.properties.'). <code>'feature.properties.name'</code> <code>fill_color</code> <code>str</code> <p>Color scheme for the choropleth.</p> <code>'YlGn'</code> <code>legend_name</code> <code>str</code> <p>Name for the legend.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for folium.Choropleth.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_choropleth(\n    self,\n    gdf,\n    column,\n    join_col,\n    key_on=\"feature.properties.name\",\n    fill_color=\"YlGn\",\n    legend_name=None,\n    tooltip_fields=None,\n    tooltip_aliases=None,\n    **kwargs,\n):\n    \"\"\"Add a Choropleth layer to the map.\n\n    Args:\n        gdf (GeoDataFrame or str): GeoDataFrame or path to file with geometries and data.\n        column (str): Column in the GeoDataFrame to color by.\n        join_col (str): Column to join GeoJSON and data on.\n        key_on (str): GeoJSON property key to match join_col (e.g., 'feature.properties.&lt;name&gt;').\n        fill_color (str): Color scheme for the choropleth.\n        legend_name (str): Name for the legend.\n        **kwargs: Additional arguments for folium.Choropleth.\n    \"\"\"\n    import geopandas as gpd\n    import json\n\n    # Case 1: file path\n    if isinstance(gdf, str):\n        gdf = gpd.read_file(gdf)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = json.loads(gdf.to_json())\n\n    # Case 2: GeoJSON dictionary\n    elif isinstance(gdf, dict):\n        if \"features\" not in gdf:\n            raise ValueError(\"GeoJSON dict must have a 'features' key.\")\n        try:\n            gdf = gpd.GeoDataFrame.from_features(gdf[\"features\"])\n            gdf = gdf.set_geometry(\"geometry\").set_crs(epsg=4326)\n            geojson = gdf.__geo_interface__  # or json.loads(gdf.to_json())\n        except Exception as e:\n            raise ValueError(f\"Failed to parse GeoJSON dictionary: {e}\")\n\n    # Case 3: GeoDataFrame\n    elif isinstance(gdf, gpd.GeoDataFrame):\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = json.loads(gdf.to_json())\n\n    else:\n        raise TypeError(\n            \"gdf must be a GeoDataFrame, file path, or GeoJSON dictionary.\"\n        )\n\n    if join_col not in gdf.columns or column not in gdf.columns:\n        raise ValueError(\n            f\"'{join_col}' and/or '{column}' not found in GeoDataFrame columns: {list(gdf.columns)}\"\n        )\n\n    folium.Choropleth(\n        geo_data=geojson,\n        data=gdf[[join_col, column]],\n        columns=[join_col, column],\n        key_on=key_on,\n        fill_color=fill_color,\n        fill_opacity=0.7,\n        line_opacity=0.2,\n        legend_name=legend_name or column,\n        **kwargs,\n    ).add_to(self)\n\n    # Add tooltips on hover (optional)\n    if tooltip_fields:\n        folium.GeoJson(\n            geojson,\n            tooltip=folium.GeoJsonTooltip(\n                fields=tooltip_fields,\n                aliases=tooltip_aliases or tooltip_fields,\n                localize=True,\n                sticky=True,\n                labels=True,\n            ),\n            style_function=lambda x: {\n                \"fillOpacity\": 0,\n                \"weight\": 0,\n            },  # transparent overlay\n        ).add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Add a GeoDataFrame layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional arguments for folium.GeoJson.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Add a GeoDataFrame layer to the map.\n\n    Args:\n        gdf (GeoDataFrame): GeoDataFrame to add.\n        **kwargs: Additional arguments for folium.GeoJson.\n    \"\"\"\n\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, tooltip_fields=None, tooltip_aliases=None, highlight=True, style_function=None, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map with optional tooltip and highlight on hover.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Path to the GeoJSON file or GeoJSON data.</p> required <code>tooltip_fields</code> <code>list</code> <p>Fields to include in the tooltip.</p> <code>None</code> <code>tooltip_aliases</code> <code>list</code> <p>Optional aliases for tooltip fields.</p> <code>None</code> <code>highlight</code> <code>bool</code> <p>Whether to highlight geometry on hover.</p> <code>True</code> <code>style_function</code> <code>function</code> <p>Optional base style function.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for folium.GeoJson.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If data is not a string or dictionary.</p> <code>ValueError</code> <p>If data is not a valid GeoJSON.</p> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_geojson(\n    self,\n    data,\n    tooltip_fields=None,\n    tooltip_aliases=None,\n    highlight=True,\n    style_function=None,\n    **kwargs,\n):\n    \"\"\"Add a GeoJSON layer to the map with optional tooltip and highlight on hover.\n\n    Args:\n        data (str or dict): Path to the GeoJSON file or GeoJSON data.\n        tooltip_fields (list): Fields to include in the tooltip.\n        tooltip_aliases (list): Optional aliases for tooltip fields.\n        highlight (bool): Whether to highlight geometry on hover.\n        style_function (function): Optional base style function.\n        **kwargs: Additional arguments for folium.GeoJson.\n\n    Raises:\n        TypeError: If data is not a string or dictionary.\n        ValueError: If data is not a valid GeoJSON.\n    \"\"\"\n    import geopandas as gpd\n    import folium\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n    else:\n        raise TypeError(\"Data must be a file path or GeoJSON dictionary.\")\n\n    # Default style (optional)\n    default_style = style_function or (\n        lambda f: {\"fillOpacity\": 0.5, \"weight\": 1, \"color\": \"gray\"}\n    )\n\n    # Optional highlight effect on hover\n    highlight_fn = (\n        (lambda f: {\"weight\": 3, \"color\": \"yellow\", \"fillOpacity\": 0.2})\n        if highlight\n        else None\n    )\n\n    # Tooltip configuration\n    tooltip = (\n        folium.GeoJsonTooltip(\n            fields=tooltip_fields,\n            aliases=tooltip_aliases or tooltip_fields,\n            localize=True,\n            sticky=True,\n            labels=True,\n        )\n        if tooltip_fields\n        else None\n    )\n\n    folium.GeoJson(\n        data=geojson,\n        style_function=default_style,\n        highlight_function=highlight_fn,\n        tooltip=tooltip,\n        **kwargs,\n    ).add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional arguments for folium.LayerControl.</p> required Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Add a layer control to the map.\n\n    Args:\n        **kwargs: Additional arguments for folium.LayerControl.\n    \"\"\"\n    folium.LayerControl().add_to(self)\n    folium.plugins.Fullscreen().add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Add a shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Path to the shapefile.</p> required <code>**kwargs</code> <p>Additional arguments for folium.GeoJson.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Add a shapefile layer to the map.\n\n    Args:\n        data (str): Path to the shapefile.\n        **kwargs: Additional arguments for folium.GeoJson.\n    \"\"\"\n\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_split_map","title":"<code>add_split_map(self, left='openstreetmap', right='cartodbpositron', **kwargs)</code>","text":"<p>Add a split map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>str</code> <p>Name of the left layer. Default is \"openstreetmap\".</p> <code>'openstreetmap'</code> <code>right</code> <code>str</code> <p>Name of the right layer. Default is \"cartodbpositron\".</p> <code>'cartodbpositron'</code> <code>**kwargs</code> <p>Additional arguments for folium.TileLayer.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_split_map(self, left=\"openstreetmap\", right=\"cartodbpositron\", **kwargs):\n    \"\"\"Add a split map to the map.\n    Args:\n        left (str): Name of the left layer. Default is \"openstreetmap\".\n        right (str): Name of the right layer. Default is \"cartodbpositron\".\n        **kwargs: Additional arguments for folium.TileLayer.\n    \"\"\"\n    from localtileserver import get_folium_tile_layer\n    import os\n\n    if left.startswith(\"http\") or os.path.exists(left):\n        layer_left = get_folium_tile_layer(left, overlay=True, **kwargs)\n    else:\n        layer_left = folium.TileLayer(left, overlay=True, **kwargs)\n\n    if right.startswith(\"http\") or os.path.exists(right):\n        layer_right = get_folium_tile_layer(right, overlay=True, **kwargs)\n    else:\n        layer_right = folium.TileLayer(right, overlay=True, **kwargs)\n\n    sbs = folium.plugins.SideBySideLayers(\n        layer_left=layer_left, layer_right=layer_right\n    )\n\n    layer_left.add_to(self)\n    layer_right.add_to(self)\n    sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Add a vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or GeoDataFrame or dict</code> <p>Path to the vector file, GeoDataFrame, or GeoJSON data.</p> required <code>**kwargs</code> <p>Additional arguments for folium.GeoJson.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Add a vector layer to the map.\n\n    Args:\n        data (str or GeoDataFrame or dict): Path to the vector file,\n            GeoDataFrame, or GeoJSON data.\n        **kwargs: Additional arguments for folium.GeoJson.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\n            \"Unsupported data type. Please provide a GeoDataFrame, GeoJSON, or file path.\"\n        )\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install portgeo, run this command in your terminal:</p> <pre><code>pip install portgeo\n</code></pre> <p>This is the preferred method to install portgeo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install portgeo from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/snowport/portgeo\n</code></pre>"},{"location":"portgeo/","title":"portgeo module","text":"<p>Main module.</p>"},{"location":"portgeo/#portgeo.portgeo.Map","title":"<code> Map            (Map)         </code>","text":"<p>Custom Map class to handle portgeos.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Center of the map.</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Zoom level of the map.</p> <code>2</code> <code>scroll_wheel_zoom</code> <code>bool</code> <p>Enable scroll wheel zoom.</p> <code>True</code> <code>height</code> <code>str</code> <p>Height of the map.</p> <code>'400px'</code> <code>**kwargs</code> <p>Additional arguments for ipyleaflet.Map.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"Custom Map class to handle portgeos.\n\n    Args:\n        center (list): Center of the map.\n        zoom (int): Zoom level of the map.\n        scroll_wheel_zoom (bool): Enable scroll wheel zoom.\n        height (str): Height of the map.\n        **kwargs: Additional arguments for ipyleaflet.Map.\n    \"\"\"\n\n    def __init__(\n        self, center=[20, 0], zoom=2, scroll_wheel_zoom=True, height=\"400px\", **kwargs\n    ):\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.scroll_wheel_zoom = scroll_wheel_zoom\n        self.layout.height = height\n        self.add_toolkit()\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Add a basemap to the map.\n\n        Args:\n            Options: 'OpenStreetMap.Mapnik', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenTopoMap',\n                            'Gaode.Normal', 'Gaode.Satellite', 'Esri.WorldStreetMap', 'Esri.WorldTopoMap', 'Esri.WorldImagery',\n                            'Esri.NatGeoWorldMap', 'CartoDB.Positron', 'CartoDB.DarkMatter', 'NASAGIBS.ModisTerraTrueColorCR',\n                            'NASAGIBS.ModisTerraBands367CR', 'NASAGIBS.ModisTerraBands721CR', 'NASAGIBS.ModisAquaTrueColorCR',\n                            'NASAGIBS.ModisAquaBands721CR', 'NASAGIBS.ViirsTrueColorCR', 'NASAGIBS.ViirsEarthAtNight2012',\n                            'Strava.All', 'Strava.Ride', 'Strava.Run', 'Strava.Water', 'Strava.Winter'.\n        \"\"\"\n\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add(layer)\n\n    def add_toolkit(self, basemaps=None, position=\"topright\"):\n        import ipywidgets as widgets\n        import ipyleaflet\n\n        if basemaps is None:\n            basemaps = [\n                \"OpenStreetMap.Mapnik\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Gaode.Satellite\",\n                \"CartoDB.DarkMatter\",\n                \"CartoDB.Positron\",\n            ]\n\n        # Master toggle to open/close toolkit\n        toolkit_toggle = widgets.ToggleButton(\n            value=False,\n            icon=\"cogs\",  # Or \"wrench\", \"tools\", \"gear\"\n            tooltip=\"Toggle widget toolkit\",\n            layout=widgets.Layout(width=\"38px\", height=\"38px\"),\n        )\n\n        # Individual toggles\n        map_toggle = widgets.ToggleButton(\n            value=False,\n            icon=\"map\",\n            tooltip=\"Toggle basemap selector\",\n            layout=widgets.Layout(width=\"38px\", height=\"38px\"),\n            button_style=\"info\",\n        )\n\n        opacity_toggle = widgets.ToggleButton(\n            value=False,\n            icon=\"adjust\",\n            tooltip=\"Toggle opacity control\",\n            layout=widgets.Layout(width=\"38px\", height=\"38px\"),\n            button_style=\"info\",\n        )\n\n        # close_btn = widgets.Button(icon=\"times\", tooltip=\"Close panel\",\n        #                         layout=widgets.Layout(width=\"38px\", height=\"38px\"))\n\n        # Basemap dropdown\n        basemap_dropdown = widgets.Dropdown(\n            options=basemaps,\n            value=basemaps[0],\n            description=\"Basemap:\",\n            layout=widgets.Layout(width=\"250px\", height=\"38px\"),\n            style={\"description_width\": \"initial\"},\n        )\n\n        # Opacity slider\n        opacity_slider = widgets.IntSlider(\n            value=100,\n            min=0,\n            max=100,\n            step=1,\n            description=\"Opacity (%)\",\n            layout=widgets.Layout(width=\"250px\", height=\"38px\"),\n        )\n\n        # Toolkit header row\n        button_row = widgets.HBox([map_toggle, opacity_toggle])\n\n        # Main container\n        container = widgets.VBox([toolkit_toggle])  # initially only toolkit button\n\n        # Helper to get current basemap\n        def get_current_basemap():\n            for layer in reversed(self.layers):\n                if isinstance(layer, ipyleaflet.TileLayer):\n                    return layer\n            return None\n\n        # Layout update logic\n        def update_container():\n            children = [toolkit_toggle]\n            if toolkit_toggle.value:\n                children.append(button_row)\n                if map_toggle.value:\n                    children.append(basemap_dropdown)\n                if opacity_toggle.value:\n                    children.append(opacity_slider)\n            container.children = children\n\n        # Event listeners\n        toolkit_toggle.observe(lambda c: update_container(), names=\"value\")\n        map_toggle.observe(lambda c: update_container(), names=\"value\")\n        opacity_toggle.observe(lambda c: update_container(), names=\"value\")\n        # close_btn.on_click(lambda b: container.close())\n\n        # Functional logic\n        basemap_dropdown.observe(\n            lambda change: (\n                self.remove_layer(get_current_basemap()),\n                self.add_basemap(change[\"new\"]),\n                setattr(get_current_basemap(), \"opacity\", opacity_slider.value / 100),\n            ),\n            names=\"value\",\n        )\n\n        opacity_slider.observe(\n            lambda change: setattr(\n                get_current_basemap(), \"opacity\", change[\"new\"] / 100\n            ),\n            names=\"value\",\n        )\n\n        # Initial state\n        update_container()\n\n        # Add to map\n        control = ipyleaflet.WidgetControl(widget=container, position=position)\n        self.add(control)\n\n    def add_widget(self, widget, position=\"topright\", **kwargs):\n        \"\"\"Add a widget to the map.\n        Args:\n            widget (ipywidgets.Widget): Widget to add.\n            position (str): Position of the widget.\n            **kwargs: Additional arguments for ipyleaflet.WidgetControl.\n        \"\"\"\n\n        control = ipyleaflet.WidgetControl(widget=widget, position=position, **kwargs)\n        self.add(control)\n\n    def add_google_map(self, map_type=\"roadmap\"):\n        \"\"\"Add a Google Map to the map.\n\n        Args:\n            map_type (str): Type of Google Map to add.\n                Options: 'roadmap', 'satellite', 'hybrid', 'terrain'.\n        \"\"\"\n\n        map_types = {\"roadmap\": \"r\", \"satellite\": \"s\", \"hybrid\": \"y\", \"terrain\": \"p\"}\n        map_type = map_types[map_type.lower()]\n\n        url = f\"https://mt1.google.com/maps/vt/lyrs={map_type}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        layer = ipyleaflet.TileLayer(\n            url=url, name=f\"Google {map_type.capitalize()}\", attribution=\"Google\"\n        )\n        self.add(layer)\n\n    def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n        \"\"\"Add a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): Path to the GeoJSON file or GeoJSON data.\n            zoom_to_layer (bool): Whether to zoom to the layer bounds.\n            hover_style (dict): Style for hover effect.\n            **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\n                \"color\": \"yellow\",\n                \"fillColor\": \"yellow\",\n                \"fillOpacity\": 0.5,\n                \"weight\": 2,\n            }\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n\n        elif isinstance(data, dict):\n            geojson = data\n\n        layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n        self.add_layer(layer)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Add a shapefile layer to the map.\n\n        Args:\n            data (str): Path to the shapefile.\n            **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Add a GeoDataFrame layer to the map.\n\n        Args:\n            gdf (GeoDataFrame): GeoDataFrame to add.\n            **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Add a vector layer to the map.\n\n        Args:\n            data (str or geopandas.GeoDataFrame or dict): Path to the vector file,\n                GeoDataFrame, or GeoJSON data.\n            **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n\n        Raises:\n            ValueError: If the data type is unsupported.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\n                \"Unsupported data type. Please provide a GeoDataFrame, GeoJSON, or file path.\"\n            )\n\n    def add_layer_control(self, **kwargs):\n        \"\"\"Add a layer control to the map.\n\n        Args:\n            **kwargs: Additional arguments for ipyleaflet.LayersControl.\n        \"\"\"\n\n        layer_control = ipyleaflet.LayersControl(position=\"topright\", **kwargs)\n        self.add_control(layer_control)\n\n    def add_fullscreen(self, **kwargs):\n        \"\"\"Add a fullscreen control to the map.\n\n        Args:\n            **kwargs: Additional arguments for ipyleaflet.FullScreenControl.\n        \"\"\"\n\n        fullscreen = ipyleaflet.FullScreenControl(position=\"topright\", **kwargs)\n        self.add_control(fullscreen)\n\n    def add_raster(self, filepath, **kwargs):\n        \"\"\"Add a raster layer to the map.\n        Args:\n            filepath (str): Path to the raster file.\n            **kwargs: Additional arguments for localtileserver.TileClient.\n        \"\"\"\n\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        client = TileClient(filepath)\n        tile_layer = get_leaflet_tile_layer(client, **kwargs)\n\n        self.add(tile_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    def add_image(self, image, bounds=None, **kwargs):\n        \"\"\"Add an image layer to the map.\n\n        Args:\n            image (str): Path to the image file.\n            bounds (list, optional): Bounds of the image in the format [[lat1, lon1], [lat2, lon2]].\n            **kwargs: Additional arguments for ipyleaflet.ImageOverlay.\n        \"\"\"\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n\n        layer = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n        self.add(layer)\n\n    def add_video(self, video, bounds=None, **kwargs):\n        \"\"\"Add a video layer to the map.\n\n        Args:\n            video (str): Path to the video file.\n            bounds (list, optional): Bounds of the video in the format [[lat1, lon1], [lat2, lon2]].\n            **kwargs: Additional arguments for ipyleaflet.VideoOverlay.\n        \"\"\"\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n\n        layer = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n        self.add(layer)\n\n    def add_wms_layer(\n        self, url, layers, format=\"image/png\", transparent=True, **kwargs\n    ):\n        \"\"\"Add a WMS layer to the map.\n\n        Args:\n            url (str): URL of the WMS service.\n            layers (str): Comma-separated list of layer names.\n            **kwargs: Additional arguments for ipyleaflet.WMSLayer.\n        \"\"\"\n\n        layer = ipyleaflet.WMSLayer(\n            url=url, layers=layers, format=format, transparent=transparent, **kwargs\n        )\n        self.add(layer)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Add a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>Options</code> <p>'OpenStreetMap.Mapnik', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenTopoMap',             'Gaode.Normal', 'Gaode.Satellite', 'Esri.WorldStreetMap', 'Esri.WorldTopoMap', 'Esri.WorldImagery',             'Esri.NatGeoWorldMap', 'CartoDB.Positron', 'CartoDB.DarkMatter', 'NASAGIBS.ModisTerraTrueColorCR',             'NASAGIBS.ModisTerraBands367CR', 'NASAGIBS.ModisTerraBands721CR', 'NASAGIBS.ModisAquaTrueColorCR',             'NASAGIBS.ModisAquaBands721CR', 'NASAGIBS.ViirsTrueColorCR', 'NASAGIBS.ViirsEarthAtNight2012',             'Strava.All', 'Strava.Ride', 'Strava.Run', 'Strava.Water', 'Strava.Winter'.</p> required Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Add a basemap to the map.\n\n    Args:\n        Options: 'OpenStreetMap.Mapnik', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenTopoMap',\n                        'Gaode.Normal', 'Gaode.Satellite', 'Esri.WorldStreetMap', 'Esri.WorldTopoMap', 'Esri.WorldImagery',\n                        'Esri.NatGeoWorldMap', 'CartoDB.Positron', 'CartoDB.DarkMatter', 'NASAGIBS.ModisTerraTrueColorCR',\n                        'NASAGIBS.ModisTerraBands367CR', 'NASAGIBS.ModisTerraBands721CR', 'NASAGIBS.ModisAquaTrueColorCR',\n                        'NASAGIBS.ModisAquaBands721CR', 'NASAGIBS.ViirsTrueColorCR', 'NASAGIBS.ViirsEarthAtNight2012',\n                        'Strava.All', 'Strava.Ride', 'Strava.Run', 'Strava.Water', 'Strava.Winter'.\n    \"\"\"\n\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add(layer)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_fullscreen","title":"<code>add_fullscreen(self, **kwargs)</code>","text":"<p>Add a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional arguments for ipyleaflet.FullScreenControl.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_fullscreen(self, **kwargs):\n    \"\"\"Add a fullscreen control to the map.\n\n    Args:\n        **kwargs: Additional arguments for ipyleaflet.FullScreenControl.\n    \"\"\"\n\n    fullscreen = ipyleaflet.FullScreenControl(position=\"topright\", **kwargs)\n    self.add_control(fullscreen)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Add a GeoDataFrame layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Add a GeoDataFrame layer to the map.\n\n    Args:\n        gdf (GeoDataFrame): GeoDataFrame to add.\n        **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Path to the GeoJSON file or GeoJSON data.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer bounds.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style for hover effect.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n    \"\"\"Add a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): Path to the GeoJSON file or GeoJSON data.\n        zoom_to_layer (bool): Whether to zoom to the layer bounds.\n        hover_style (dict): Style for hover effect.\n        **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\n            \"color\": \"yellow\",\n            \"fillColor\": \"yellow\",\n            \"fillOpacity\": 0.5,\n            \"weight\": 2,\n        }\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n\n    elif isinstance(data, dict):\n        geojson = data\n\n    layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n    self.add_layer(layer)\n\n    if zoom_to_layer:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_google_map","title":"<code>add_google_map(self, map_type='roadmap')</code>","text":"<p>Add a Google Map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>Type of Google Map to add. Options: 'roadmap', 'satellite', 'hybrid', 'terrain'.</p> <code>'roadmap'</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_google_map(self, map_type=\"roadmap\"):\n    \"\"\"Add a Google Map to the map.\n\n    Args:\n        map_type (str): Type of Google Map to add.\n            Options: 'roadmap', 'satellite', 'hybrid', 'terrain'.\n    \"\"\"\n\n    map_types = {\"roadmap\": \"r\", \"satellite\": \"s\", \"hybrid\": \"y\", \"terrain\": \"p\"}\n    map_type = map_types[map_type.lower()]\n\n    url = f\"https://mt1.google.com/maps/vt/lyrs={map_type}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    layer = ipyleaflet.TileLayer(\n        url=url, name=f\"Google {map_type.capitalize()}\", attribution=\"Google\"\n    )\n    self.add(layer)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_image","title":"<code>add_image(self, image, bounds=None, **kwargs)</code>","text":"<p>Add an image layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>Path to the image file.</p> required <code>bounds</code> <code>list</code> <p>Bounds of the image in the format [[lat1, lon1], [lat2, lon2]].</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for ipyleaflet.ImageOverlay.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_image(self, image, bounds=None, **kwargs):\n    \"\"\"Add an image layer to the map.\n\n    Args:\n        image (str): Path to the image file.\n        bounds (list, optional): Bounds of the image in the format [[lat1, lon1], [lat2, lon2]].\n        **kwargs: Additional arguments for ipyleaflet.ImageOverlay.\n    \"\"\"\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n\n    layer = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_layer_control","title":"<code>add_layer_control(self, **kwargs)</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional arguments for ipyleaflet.LayersControl.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_layer_control(self, **kwargs):\n    \"\"\"Add a layer control to the map.\n\n    Args:\n        **kwargs: Additional arguments for ipyleaflet.LayersControl.\n    \"\"\"\n\n    layer_control = ipyleaflet.LayersControl(position=\"topright\", **kwargs)\n    self.add_control(layer_control)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_raster","title":"<code>add_raster(self, filepath, **kwargs)</code>","text":"<p>Add a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the raster file.</p> required <code>**kwargs</code> <p>Additional arguments for localtileserver.TileClient.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_raster(self, filepath, **kwargs):\n    \"\"\"Add a raster layer to the map.\n    Args:\n        filepath (str): Path to the raster file.\n        **kwargs: Additional arguments for localtileserver.TileClient.\n    \"\"\"\n\n    from localtileserver import TileClient, get_leaflet_tile_layer\n\n    client = TileClient(filepath)\n    tile_layer = get_leaflet_tile_layer(client, **kwargs)\n\n    self.add(tile_layer)\n    self.center = client.center()\n    self.zoom = client.default_zoom\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Add a shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Path to the shapefile.</p> required <code>**kwargs</code> <p>Additional arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Add a shapefile layer to the map.\n\n    Args:\n        data (str): Path to the shapefile.\n        **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Add a vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or geopandas.GeoDataFrame or dict</code> <p>Path to the vector file, GeoDataFrame, or GeoJSON data.</p> required <code>**kwargs</code> <p>Additional arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is unsupported.</p> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Add a vector layer to the map.\n\n    Args:\n        data (str or geopandas.GeoDataFrame or dict): Path to the vector file,\n            GeoDataFrame, or GeoJSON data.\n        **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n\n    Raises:\n        ValueError: If the data type is unsupported.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\n            \"Unsupported data type. Please provide a GeoDataFrame, GeoJSON, or file path.\"\n        )\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_video","title":"<code>add_video(self, video, bounds=None, **kwargs)</code>","text":"<p>Add a video layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>str</code> <p>Path to the video file.</p> required <code>bounds</code> <code>list</code> <p>Bounds of the video in the format [[lat1, lon1], [lat2, lon2]].</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for ipyleaflet.VideoOverlay.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_video(self, video, bounds=None, **kwargs):\n    \"\"\"Add a video layer to the map.\n\n    Args:\n        video (str): Path to the video file.\n        bounds (list, optional): Bounds of the video in the format [[lat1, lon1], [lat2, lon2]].\n        **kwargs: Additional arguments for ipyleaflet.VideoOverlay.\n    \"\"\"\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n\n    layer = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_widget","title":"<code>add_widget(self, widget, position='topright', **kwargs)</code>","text":"<p>Add a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>ipywidgets.Widget</code> <p>Widget to add.</p> required <code>position</code> <code>str</code> <p>Position of the widget.</p> <code>'topright'</code> <code>**kwargs</code> <p>Additional arguments for ipyleaflet.WidgetControl.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_widget(self, widget, position=\"topright\", **kwargs):\n    \"\"\"Add a widget to the map.\n    Args:\n        widget (ipywidgets.Widget): Widget to add.\n        position (str): Position of the widget.\n        **kwargs: Additional arguments for ipyleaflet.WidgetControl.\n    \"\"\"\n\n    control = ipyleaflet.WidgetControl(widget=widget, position=position, **kwargs)\n    self.add(control)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Add a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the WMS service.</p> required <code>layers</code> <code>str</code> <p>Comma-separated list of layer names.</p> required <code>**kwargs</code> <p>Additional arguments for ipyleaflet.WMSLayer.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_wms_layer(\n    self, url, layers, format=\"image/png\", transparent=True, **kwargs\n):\n    \"\"\"Add a WMS layer to the map.\n\n    Args:\n        url (str): URL of the WMS service.\n        layers (str): Comma-separated list of layer names.\n        **kwargs: Additional arguments for ipyleaflet.WMSLayer.\n    \"\"\"\n\n    layer = ipyleaflet.WMSLayer(\n        url=url, layers=layers, format=format, transparent=transparent, **kwargs\n    )\n    self.add(layer)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use portgeo in a project:</p> <pre><code>import portgeo\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Explore example notebooks for maps, raster data, and interactivity.</p>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[3]: Copied! <pre>import portgeo.foliumap as portgeo\nimport geopandas as gpd\nimport pandas as pd\nimport numpy as np\n</pre> import portgeo.foliumap as portgeo import geopandas as gpd import pandas as pd import numpy as np In\u00a0[2]: Copied! <pre>m = portgeo.Map()\nurl = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\"\nm.add_geojson(\n    url,\n    name=\"Continents\",\n    center=(20, 0),\n    zoom=1,\n    key_on=\"CONTINENT\",\n    tooltip_fields=[\"CONTINENT\"],\n    tooltip_aliases=[\"Continent\"],\n    style={\"color\": \"blue\", \"weight\": 2, \"fillOpacity\": 0.2},\n)\nm.add_layer_control()\nm\n</pre> m = portgeo.Map() url = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\" m.add_geojson(     url,     name=\"Continents\",     center=(20, 0),     zoom=1,     key_on=\"CONTINENT\",     tooltip_fields=[\"CONTINENT\"],     tooltip_aliases=[\"Continent\"],     style={\"color\": \"blue\", \"weight\": 2, \"fillOpacity\": 0.2}, ) m.add_layer_control() m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[8]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/us/us_states.geojson\"\ngdf = gpd.read_file(url)\n\ngdf[\"value\"] = np.random.randint(0, 100, size=len(gdf))\n\ngdf.head()\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/us/us_states.geojson\" gdf = gpd.read_file(url)  gdf[\"value\"] = np.random.randint(0, 100, size=len(gdf))  gdf.head() Out[8]: id name geometry value 0 AL Alabama MULTIPOLYGON (((-87.3593 35.00118, -85.60668 3... 77 1 AK Alaska MULTIPOLYGON (((-131.60202 55.11798, -131.5691... 49 2 AZ Arizona MULTIPOLYGON (((-109.0425 37.00026, -109.04798... 87 3 AR Arkansas MULTIPOLYGON (((-94.47384 36.50186, -90.15254 ... 92 4 CA California MULTIPOLYGON (((-123.23326 42.00619, -122.3788... 46 In\u00a0[9]: Copied! <pre>m = portgeo.Map(center=(40, -100), zoom=4)\n\nm.add_choropleth(\n    gdf=gdf,\n    column=\"value\",\n    join_col=\"name\",\n    key_on=\"feature.properties.name\",\n    fill_color=\"YlOrRd\",\n    legend_name=\"US States\",\n    tooltip_fields=[\"name\", \"value\"],\n    tooltip_alias={\"name\": \"State\", \"value\": \"Value\"},\n    name=\"US States\",\n)\nm.add_layer_control()\nm\n</pre> m = portgeo.Map(center=(40, -100), zoom=4)  m.add_choropleth(     gdf=gdf,     column=\"value\",     join_col=\"name\",     key_on=\"feature.properties.name\",     fill_color=\"YlOrRd\",     legend_name=\"US States\",     tooltip_fields=[\"name\", \"value\"],     tooltip_alias={\"name\": \"State\", \"value\": \"Value\"},     name=\"US States\", ) m.add_layer_control() m Out[9]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/folium/#folium-demo","title":"Folium Demo\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import portgeo as pg\n</pre> import portgeo as pg In\u00a0[2]: Copied! <pre>m = pg.Map(center=[40, -100], zoom=4)\nm.add_basemap(basemap=\"Esri.WorldImagery\")\nm\n</pre> m = pg.Map(center=[40, -100], zoom=4) m.add_basemap(basemap=\"Esri.WorldImagery\") m Out[2]: <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[3]: Copied! <pre>m2 = pg.Map(center=[40, -100], zoom=4)\nm2.add_google_map(\"satellite\")\nm2.add_layer_control()\nm2\n</pre> m2 = pg.Map(center=[40, -100], zoom=4) m2.add_google_map(\"satellite\") m2.add_layer_control() m2 Out[3]: <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre>"},{"location":"examples/intro/#introduction","title":"Introduction\u00b6","text":""},{"location":"examples/map/","title":"Map","text":"In\u00a0[\u00a0]: Copied! <pre>import portgeo as pg\n</pre> import portgeo as pg In\u00a0[\u00a0]: Copied! <pre>data = \"https://github.com/opengeos/datasets/releases/download/world/countries.zip\"\n</pre> data = \"https://github.com/opengeos/datasets/releases/download/world/countries.zip\" In\u00a0[\u00a0]: Copied! <pre>m = pg.Map()\nm.add_vector(\n    data, zoom_to_layer=False, hover_style={\"fillColor\": \"red\"}, name=\"countries\"\n)\nm.add_layer_control()\nm\n</pre> m = pg.Map() m.add_vector(     data, zoom_to_layer=False, hover_style={\"fillColor\": \"red\"}, name=\"countries\" ) m.add_layer_control() m"},{"location":"examples/map/#create-interactive-maps","title":"Create Interactive Maps\u00b6","text":""},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import portgeo as pg\n</pre> import portgeo as pg In\u00a0[3]: Copied! <pre>m = pg.Map()\nm\n</pre> m = pg.Map() m Out[3]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[4]: Copied! <pre>filename = \"https://github.com/opengeos/datasets/releases/download/raster/dem_90m.tif\"\n</pre> filename = \"https://github.com/opengeos/datasets/releases/download/raster/dem_90m.tif\" In\u00a0[5]: Copied! <pre>m.add_raster(filename, colormap=\"terrain\", opacity=0.5, name=\"dem_90m\")\n</pre> m.add_raster(filename, colormap=\"terrain\", opacity=0.5, name=\"dem_90m\") In\u00a0[6]: Copied! <pre>url = \"https://eoimages.gsfc.nasa.gov/images/imagerecords/77000/77506/erie_tmo_2012081.jpg\"\nbounds = ((40.9, -83.6), (43.3, -78.8))\nm.add_image(url, bounds=bounds, opacity=0.5, name=\"erie_tmo_2012081.jpg\")\n</pre> url = \"https://eoimages.gsfc.nasa.gov/images/imagerecords/77000/77506/erie_tmo_2012081.jpg\" bounds = ((40.9, -83.6), (43.3, -78.8)) m.add_image(url, bounds=bounds, opacity=0.5, name=\"erie_tmo_2012081.jpg\") In\u00a0[7]: Copied! <pre>url = \"https://videos.pexels.com/video-files/4328709/4328709-uhd_2560_1440_30fps.mp4\"\nbounds = ((0, 0), (2, 3))\nm.add_video(url, bounds=bounds)\n</pre> url = \"https://videos.pexels.com/video-files/4328709/4328709-uhd_2560_1440_30fps.mp4\" bounds = ((0, 0), (2, 3)) m.add_video(url, bounds=bounds) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/raster/#raster","title":"Raster\u00b6","text":""},{"location":"examples/split_map/","title":"Split map","text":"In\u00a0[1]: Copied! <pre>import portgeo.foliumap as portgeo\n</pre> import portgeo.foliumap as portgeo In\u00a0[2]: Copied! <pre>m = portgeo.Map()\nm.add_split_map(left=\"openstreetmap\", right=\"Esri.WorldImagery\")\nm.add_layer_control()\nm\n</pre> m = portgeo.Map() m.add_split_map(left=\"openstreetmap\", right=\"Esri.WorldImagery\") m.add_layer_control() m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/split_map/#split-map","title":"Split Map\u00b6","text":""},{"location":"examples/widget/","title":"Widget","text":"In\u00a0[1]: Copied! <pre>import portgeo as pg\n</pre> import portgeo as pg In\u00a0[2]: Copied! <pre>m = pg.Map()\nm.add_layer_control()\n\nm\n</pre> m = pg.Map() m.add_layer_control()  m Out[2]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/widget/#widget-control","title":"Widget Control\u00b6","text":""}]}