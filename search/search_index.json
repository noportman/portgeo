{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to portgeo","text":"<p>A python package for geospatial applications</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://noportman.github.io/portgeo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create interactive maps</li> <li>Process geospatial data</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>import portgeo\nimport os\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#portgeo.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>portgeo/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/noportman/portgeo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>portgeo could always use more documentation, whether as part of the official portgeo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/noportman/portgeo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up portgeo for local development.</p> <ol> <li> <p>Fork the portgeo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/portgeo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv portgeo\n$ cd portgeo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 portgeo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/noportman/portgeo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>This module provides a custom Map class that extends folium.Map</p>"},{"location":"foliumap/#portgeo.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Custom Map class to handle portgeos.</p> Source code in <code>portgeo/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"Custom Map class to handle portgeos.\"\"\"\n\n    def __init__(self, center=[0, 0], zoom=2, **kwargs):\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_geojson(self, data, **kwargs):\n        \"\"\"Add a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): Path to the GeoJSON file or GeoJSON data.\n            **kwargs: Additional arguments for folium.GeoJson.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n\n        elif isinstance(data, dict):\n            geojson = data\n\n        folium.GeoJson(data=geojson, **kwargs).add_to(self)\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Add a shapefile layer to the map.\n\n        Args:\n            data (str): Path to the shapefile.\n            **kwargs: Additional arguments for folium.GeoJson.\n        \"\"\"\n\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Add a GeoDataFrame layer to the map.\n\n        Args:\n            gdf (GeoDataFrame): GeoDataFrame to add.\n            **kwargs: Additional arguments for folium.GeoJson.\n        \"\"\"\n\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Add a vector layer to the map.\n\n        Args:\n            data (str or GeoDataFrame or dict): Path to the vector file,\n                GeoDataFrame, or GeoJSON data.\n            **kwargs: Additional arguments for folium.GeoJson.\n        \"\"\"\n        import folium\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\n                \"Unsupported data type. Please provide a GeoDataFrame, GeoJSON, or file path.\"\n            )\n\n    def add_layer_control(self):\n        \"\"\"Add a layer control to the map.\n\n        Args:\n            **kwargs: Additional arguments for folium.LayerControl.\n        \"\"\"\n        folium.LayerControl().add_to(self)\n\n    def add_split_map(self, left=\"openstreetmap\", right=\"cartodbpositron\", **kwargs):\n        \"\"\"Add a split map to the map.\n        Args:\n            data (str or dict): Path to the GeoJSON file or GeoJSON data.\n            **kwargs: Additional arguments for folium.SplitMap.\n        \"\"\"\n\n        # map_types = {\"roadmap\": \"r\", \"satellite\": \"s\", \"hybrid\": \"y\", \"terrain\": \"p\"}\n        # map_type = map_types[map_type.lower()]\n\n        # url = f\"https://mt1.google.com/maps/vt/lyrs={map_type}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n\n        # layer = ipyleaflet.TileLayer(url=url, name=f\"Google {map_type.capitalize()}\")\n        # self.add(layer)\n\n        layer_left = folium.TileLayer(left, **kwargs)\n        layer_right = folium.TileLayer(right, **kwargs)\n\n        sbs = folium.plugins.SideBySideLayers(\n            layer_left=layer_left, layer_right=layer_right\n        )\n\n        layer_left.add_to(self)\n        layer_right.add_to(self)\n        sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Add a GeoDataFrame layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional arguments for folium.GeoJson.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Add a GeoDataFrame layer to the map.\n\n    Args:\n        gdf (GeoDataFrame): GeoDataFrame to add.\n        **kwargs: Additional arguments for folium.GeoJson.\n    \"\"\"\n\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Path to the GeoJSON file or GeoJSON data.</p> required <code>**kwargs</code> <p>Additional arguments for folium.GeoJson.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_geojson(self, data, **kwargs):\n    \"\"\"Add a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): Path to the GeoJSON file or GeoJSON data.\n        **kwargs: Additional arguments for folium.GeoJson.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n\n    elif isinstance(data, dict):\n        geojson = data\n\n    folium.GeoJson(data=geojson, **kwargs).add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional arguments for folium.LayerControl.</p> required Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Add a layer control to the map.\n\n    Args:\n        **kwargs: Additional arguments for folium.LayerControl.\n    \"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Add a shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Path to the shapefile.</p> required <code>**kwargs</code> <p>Additional arguments for folium.GeoJson.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Add a shapefile layer to the map.\n\n    Args:\n        data (str): Path to the shapefile.\n        **kwargs: Additional arguments for folium.GeoJson.\n    \"\"\"\n\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_split_map","title":"<code>add_split_map(self, left='openstreetmap', right='cartodbpositron', **kwargs)</code>","text":"<p>Add a split map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Path to the GeoJSON file or GeoJSON data.</p> required <code>**kwargs</code> <p>Additional arguments for folium.SplitMap.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_split_map(self, left=\"openstreetmap\", right=\"cartodbpositron\", **kwargs):\n    \"\"\"Add a split map to the map.\n    Args:\n        data (str or dict): Path to the GeoJSON file or GeoJSON data.\n        **kwargs: Additional arguments for folium.SplitMap.\n    \"\"\"\n\n    # map_types = {\"roadmap\": \"r\", \"satellite\": \"s\", \"hybrid\": \"y\", \"terrain\": \"p\"}\n    # map_type = map_types[map_type.lower()]\n\n    # url = f\"https://mt1.google.com/maps/vt/lyrs={map_type}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n\n    # layer = ipyleaflet.TileLayer(url=url, name=f\"Google {map_type.capitalize()}\")\n    # self.add(layer)\n\n    layer_left = folium.TileLayer(left, **kwargs)\n    layer_right = folium.TileLayer(right, **kwargs)\n\n    sbs = folium.plugins.SideBySideLayers(\n        layer_left=layer_left, layer_right=layer_right\n    )\n\n    layer_left.add_to(self)\n    layer_right.add_to(self)\n    sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#portgeo.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Add a vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or GeoDataFrame or dict</code> <p>Path to the vector file, GeoDataFrame, or GeoJSON data.</p> required <code>**kwargs</code> <p>Additional arguments for folium.GeoJson.</p> <code>{}</code> Source code in <code>portgeo/foliumap.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Add a vector layer to the map.\n\n    Args:\n        data (str or GeoDataFrame or dict): Path to the vector file,\n            GeoDataFrame, or GeoJSON data.\n        **kwargs: Additional arguments for folium.GeoJson.\n    \"\"\"\n    import folium\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\n            \"Unsupported data type. Please provide a GeoDataFrame, GeoJSON, or file path.\"\n        )\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install portgeo, run this command in your terminal:</p> <pre><code>pip install portgeo\n</code></pre> <p>This is the preferred method to install portgeo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install portgeo from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/noportman/portgeo\n</code></pre>"},{"location":"portgeo/","title":"portgeo module","text":"<p>Main module.</p>"},{"location":"portgeo/#portgeo.portgeo.Map","title":"<code> Map            (Map)         </code>","text":"<p>Custom Map class to handle portgeos.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Center of the map.</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Zoom level of the map.</p> <code>2</code> <code>scroll_wheel_zoom</code> <code>bool</code> <p>Enable scroll wheel zoom.</p> <code>True</code> <code>height</code> <code>str</code> <p>Height of the map.</p> <code>'400px'</code> <code>**kwargs</code> <p>Additional arguments for ipyleaflet.Map.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"Custom Map class to handle portgeos.\n\n    Args:\n        center (list): Center of the map.\n        zoom (int): Zoom level of the map.\n        scroll_wheel_zoom (bool): Enable scroll wheel zoom.\n        height (str): Height of the map.\n        **kwargs: Additional arguments for ipyleaflet.Map.\n    \"\"\"\n\n    def __init__(\n        self, center=[20, 0], zoom=2, scroll_wheel_zoom=True, height=\"400px\", **kwargs\n    ):\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.scroll_wheel_zoom = scroll_wheel_zoom\n        self.layout.height = height\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Add a basemap to the map.\n\n        Args:\n            basemap (str): Name of the basemap to add.\n                Options: 'OpenStreetMap', 'Stamen Terrain', 'Stamen Toner', 'Stamen Watercolor',\n                'CartoDB Positron', 'CartoDB Dark Matter', 'Esri WorldImagery', 'Google Maps'.\n        \"\"\"\n\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add(layer)\n\n    def add_google_map(self, map_type=\"roadmap\"):\n        \"\"\"Add a Google Map to the map.\n\n        Args:\n            map_type (str): Type of Google Map to add.\n                Options: 'roadmap', 'satellite', 'hybrid', 'terrain'.\n        \"\"\"\n\n        map_types = {\"roadmap\": \"r\", \"satellite\": \"s\", \"hybrid\": \"y\", \"terrain\": \"p\"}\n        map_type = map_types[map_type.lower()]\n\n        url = f\"https://mt1.google.com/maps/vt/lyrs={map_type}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        layer = ipyleaflet.TileLayer(url=url, name=f\"Google {map_type.capitalize()}\")\n        self.add(layer)\n\n    def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n        \"\"\"Add a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): Path to the GeoJSON file or GeoJSON data.\n            zoom_to_layer (bool): Whether to zoom to the layer bounds.\n            hover_style (dict): Style for hover effect.\n            **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\n                \"color\": \"yellow\",\n                \"fillColor\": \"yellow\",\n                \"fillOpacity\": 0.5,\n                \"weight\": 2,\n            }\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n\n        elif isinstance(data, dict):\n            geojson = data\n\n        layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n        self.add_layer(layer)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Add a shapefile layer to the map.\n\n        Args:\n            data (str): Path to the shapefile.\n            **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Add a GeoDataFrame layer to the map.\n\n        Args:\n            gdf (GeoDataFrame): GeoDataFrame to add.\n            **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Add a vector layer to the map.\n\n        Args:\n            data (str or geopandas.GeoDataFrame or dict): Path to the vector file,\n                GeoDataFrame, or GeoJSON data.\n            **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n\n        Raises:\n            ValueError: If the data type is unsupported.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\n                \"Unsupported data type. Please provide a GeoDataFrame, GeoJSON, or file path.\"\n            )\n\n    def add_layer_control(self, **kwargs):\n        \"\"\"Add a layer control to the map.\n\n        Args:\n            **kwargs: Additional arguments for ipyleaflet.LayersControl.\n        \"\"\"\n\n        layer_control = ipyleaflet.LayersControl(position=\"topright\", **kwargs)\n        self.add_control(layer_control)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Add a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Name of the basemap to add. Options: 'OpenStreetMap', 'Stamen Terrain', 'Stamen Toner', 'Stamen Watercolor', 'CartoDB Positron', 'CartoDB Dark Matter', 'Esri WorldImagery', 'Google Maps'.</p> <code>'OpenStreetMap'</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Add a basemap to the map.\n\n    Args:\n        basemap (str): Name of the basemap to add.\n            Options: 'OpenStreetMap', 'Stamen Terrain', 'Stamen Toner', 'Stamen Watercolor',\n            'CartoDB Positron', 'CartoDB Dark Matter', 'Esri WorldImagery', 'Google Maps'.\n    \"\"\"\n\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add(layer)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Add a GeoDataFrame layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Add a GeoDataFrame layer to the map.\n\n    Args:\n        gdf (GeoDataFrame): GeoDataFrame to add.\n        **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Path to the GeoJSON file or GeoJSON data.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer bounds.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style for hover effect.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n    \"\"\"Add a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): Path to the GeoJSON file or GeoJSON data.\n        zoom_to_layer (bool): Whether to zoom to the layer bounds.\n        hover_style (dict): Style for hover effect.\n        **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\n            \"color\": \"yellow\",\n            \"fillColor\": \"yellow\",\n            \"fillOpacity\": 0.5,\n            \"weight\": 2,\n        }\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n\n    elif isinstance(data, dict):\n        geojson = data\n\n    layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n    self.add_layer(layer)\n\n    if zoom_to_layer:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_google_map","title":"<code>add_google_map(self, map_type='roadmap')</code>","text":"<p>Add a Google Map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>Type of Google Map to add. Options: 'roadmap', 'satellite', 'hybrid', 'terrain'.</p> <code>'roadmap'</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_google_map(self, map_type=\"roadmap\"):\n    \"\"\"Add a Google Map to the map.\n\n    Args:\n        map_type (str): Type of Google Map to add.\n            Options: 'roadmap', 'satellite', 'hybrid', 'terrain'.\n    \"\"\"\n\n    map_types = {\"roadmap\": \"r\", \"satellite\": \"s\", \"hybrid\": \"y\", \"terrain\": \"p\"}\n    map_type = map_types[map_type.lower()]\n\n    url = f\"https://mt1.google.com/maps/vt/lyrs={map_type}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    layer = ipyleaflet.TileLayer(url=url, name=f\"Google {map_type.capitalize()}\")\n    self.add(layer)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_layer_control","title":"<code>add_layer_control(self, **kwargs)</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional arguments for ipyleaflet.LayersControl.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_layer_control(self, **kwargs):\n    \"\"\"Add a layer control to the map.\n\n    Args:\n        **kwargs: Additional arguments for ipyleaflet.LayersControl.\n    \"\"\"\n\n    layer_control = ipyleaflet.LayersControl(position=\"topright\", **kwargs)\n    self.add_control(layer_control)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Add a shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Path to the shapefile.</p> required <code>**kwargs</code> <p>Additional arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Add a shapefile layer to the map.\n\n    Args:\n        data (str): Path to the shapefile.\n        **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"portgeo/#portgeo.portgeo.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Add a vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or geopandas.GeoDataFrame or dict</code> <p>Path to the vector file, GeoDataFrame, or GeoJSON data.</p> required <code>**kwargs</code> <p>Additional arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is unsupported.</p> Source code in <code>portgeo/portgeo.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Add a vector layer to the map.\n\n    Args:\n        data (str or geopandas.GeoDataFrame or dict): Path to the vector file,\n            GeoDataFrame, or GeoJSON data.\n        **kwargs: Additional arguments for ipyleaflet.GeoJSON.\n\n    Raises:\n        ValueError: If the data type is unsupported.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\n            \"Unsupported data type. Please provide a GeoDataFrame, GeoJSON, or file path.\"\n        )\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use portgeo in a project:</p> <pre><code>import portgeo\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import portgeo.foliumap as portgeo\n</pre> import portgeo.foliumap as portgeo In\u00a0[2]: Copied! <pre>m = portgeo.Map()\nurl = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\"\nm.add_geojson(url, name=\"continents\")\nm.add_layer_control()\nm\n</pre> m = portgeo.Map() url = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\" m.add_geojson(url, name=\"continents\") m.add_layer_control() m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>m = portgeo.Map()\nm.add_split_map()\nm\n</pre> m = portgeo.Map() m.add_split_map() m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/folium/#folium-demo","title":"Folium Demo\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import portgeo as pg\n</pre> import portgeo as pg In\u00a0[2]: Copied! <pre>m = pg.Map(center=[40, -100], zoom=4)\nm.add_basemap(basemap=\"OpenTopoMap\")\nm\n</pre> m = pg.Map(center=[40, -100], zoom=4) m.add_basemap(basemap=\"OpenTopoMap\") m Out[2]: In\u00a0[3]: Copied! <pre>m2 = pg.Map(center=[40, -100], zoom=4)\nm2.add_google_map(\"satellite\")\nm2\n</pre> m2 = pg.Map(center=[40, -100], zoom=4) m2.add_google_map(\"satellite\") m2 Out[3]:"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import portgeo as pg\n</pre> import portgeo as pg In\u00a0[2]: Copied! <pre>data = \"https://github.com/opengeos/datasets/releases/download/world/countries.zip\"\n</pre> data = \"https://github.com/opengeos/datasets/releases/download/world/countries.zip\" In\u00a0[3]: Copied! <pre>m = pg.Map()\nm.add_vector(\n    data, zoom_to_layer=False, hover_style={\"fillColor\": \"red\"}, name=\"countries\"\n)\nm.add_layer_control()\nm\n</pre> m = pg.Map() m.add_vector(     data, zoom_to_layer=False, hover_style={\"fillColor\": \"red\"}, name=\"countries\" ) m.add_layer_control() m Out[3]:"},{"location":"examples/map/#create-interactive-maps","title":"Create Interactive Maps\u00b6","text":""}]}